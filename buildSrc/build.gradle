plugins {
//    id 'groovy-gradle-plugin'
	id 'java'
	id 'java-library'
//	id 'com.github.joschi.licenser' version "0.6.1"
//	id 'org.cadixdev.licenser' version '0.6.1'
	id 'maven-publish'
	id 'signing'
	id 'jacoco'
//	id "io.freefair.lombok" version "6.3.0"
}
def defaultEncoding = 'UTF-8'

subprojects {
	apply plugin: 'signing'
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'eclipse'
	apply plugin: "groovy"
	apply plugin: "jacoco"
	apply plugin: 'maven-publish'

	group = 'com.sqlapp'
	
//	sourceCompatibility = 1.9
//	targetCompatibility = 1.9
	
	tag= System.properties['tag'] ?: 'master-tag'

	compileJava {
		options.encoding = defaultEncoding 
		options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << '-parameters'
		options.compilerArgs += ['-source', "${sourceCompatibility}", '-target', "${targetCompatibility}"]
	}
	compileTestJava {
		options.encoding = defaultEncoding 
		options.compilerArgs += ['-source', "${sourceCompatibility}", '-target', "${targetCompatibility}"]
	}

	repositories {
		mavenCentral()
		maven { url 'https://version99.qos.ch' }
	}

	sourceSets {
		generated {
			java {
				srcDirs = ['src/main/generated/']
			}
		}
		main {
			resources {
				srcDirs = [ 'src/main/resources' ]
			}
		}
		test {
			resources {
				srcDirs = [ 'src/test/resources' ]
			}
		}
	}

	jacoco { toolVersion = "0.8.7" }

	eclipse {
		classpath {
			defaultOutputDir = file('/target/classes')
			file {
				whenMerged { cp ->
					cp.entries.findAll {it.path.startsWith("src/test/") }*.output = "/target/test-classes"
				}
			}
			downloadSources = true
			downloadJavadoc = true
		}
	}

	javadoc {
		options {
			author false
			locale 'en_US'
			encoding 'UTF-8'
			docEncoding 'UTF-8'
			charSet 'UTF-8'
		}
		if(JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
		failOnError=false
		source = sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
		// exclude inner classes
		//exclude 'org/hoge'
	}

	java {
		withJavadocJar()
		withSourcesJar()
		toolchain {
			languageVersion = JavaLanguageVersion.of(11)
		}
	}
	
	artifacts {
		archives jar
		archives javadocJar
		archives sourcesJar
	}

	wrapper {
		gradleVersion = '7.4'
	}

	jar {
		manifest {
			attributes provider: 'gradle',
			'Implementation-Title': project.baseName,
	//		'Implementation-Vendor': '., Ltd.',
			'Implementation-Version': project.version
		}
		into("META-INF/maven/$project.group/$project.name") {
			from 'build/pom.xml'
		}
		baseName project.archivesBaseName
		exclude '**/.svn' 
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId = project.group
				artifactId = project.name
				version = project.version
				from components.java
				pom {
					name = "${project.group}:${project.baseName}"
					url = project.url
					description = project.description
					inceptionYear = project.inceptionYear
					licenses {
						license {
							name = 'The GNU Lesser General Public License, version 3.0 (LGPL-3.0)'
							url = 'https://opensource.org/licenses/LGPL-3.0'
							distribution = 'repo'
						}
					}
					scm {
						url = project.scmUrl
						connection = project.scmConnection
						developerConnection = project.scmDeveloperConnection
					}
					developers {
						developer {
							id = project.sonatypeUsername
							name = project.sonatypeFullname
							email = project.developerEmail
							url = project.developerUrl
						}
					}
				}
			}
		}
		repositories {
			maven {
				def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
				def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
				url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
				credentials {
					username sonatypeUsername
					password sonatypePassword
				}
			}
		}
	}
	
	signing {
	    //sign configurations.archives
		sign publishing.publications.mavenJava
	}
	
}
